/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	eval("'use strict';\n\nvar _bigmouse = __webpack_require__(3);\n\nvar _bigmouse2 = _interopRequireDefault(_bigmouse);\n\nvar _bigmouseParticles = __webpack_require__(2);\n\nvar _bigmouseParticles2 = _interopRequireDefault(_bigmouseParticles);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n_bigmouse2.default.cheese({\n\n    // Ask for cheeses you love\n    \"cheeses\": { \"particles\": (0, _bigmouseParticles2.default)({ radius: 30 }) },\n    // Limit the amout, don't abuse\n    \"portions\": \"a\",\n    // Arrange the mouse harborage!\n    \"harborage\": function harborage(mouse, cheese) {\n\n        switch (mouse.rel) {\n\n            case \"example.blogspot.com/1\":\n                cheese('particles', { num: 3, size: 25, color: \"hsla(0, 10%, 50%, 1)\" });\n                break;\n\n            case \"example.blogspot.com/2\":\n                cheese('particles', { num: 70, size: 5, color: \"hsla(0, 80%, 50%, 1)\" });\n                break;\n\n            case \"example.blogspot.com/3\":\n                cheese('particles', { num: 10, size: 1, color: \"hsla(0, 50%, 50%, 1)\" });\n                break;\n\n            case \"example.blogspot.com/4\":\n                cheese('particles', { num: 30, size: 10, color: \"hsla(0, 80%, 50%, 1)\", radius: 50 });\n                break;\n\n            default:\n                cheese();\n        }\n    }\n});\n\n// Start feeding it!\n_bigmouse2.default.feed();\n\n//BigMouse.configure({\n//\n//    // Declare plugins to use\n//    \"plugins\": {\"particles\": BigMouseParticles({radius:30})},\n//    // What elements you want to pick up, defaults to all\n//    \"selector\": \"a\",\n//    // Run every time an element is found and calls the plugin to render\n//    \"draw\": (element, done) => {\n//\n//        switch(element.href){\n//\n//            case \"#example.blogspot.com/1\":\n//                done('particles', {num:3, size:25, color:\"hsla(0, 10%, 50%, 1)\"});\n//                break;\n//\n//            case \"#example.blogspot.com/2\":\n//                done('particles', {num:70, size:5, color:\"hsla(0, 80%, 50%, 1)\"});\n//                break;\n//\n//            case \"#example.blogspot.com/3\":\n//                done('particles', {num:10, size:1, color:\"hsla(0, 50%, 50%, 1)\"});\n//                break;\n//\n//            case \"#example.blogspot.com/4\":\n//                done('particles', {num:30, size:10, color:\"hsla(0, 80%, 50%, 1)\", radius: 50});\n//                break;\n//\n//            default: done();\n//        }\n//    }\n//});\n//\n//// Start it!\n//BigMouse.enable();//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9pbmRleC5qcz8xNjg3Il0sInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IEJpZ01vdXNlIGZyb20gJ2JpZ21vdXNlJztcbmltcG9ydCBCaWdNb3VzZVBhcnRpY2xlcyBmcm9tICdiaWdtb3VzZS1wYXJ0aWNsZXMnO1xuXG5CaWdNb3VzZS5jaGVlc2Uoe1xuXG4gICAgLy8gQXNrIGZvciBjaGVlc2VzIHlvdSBsb3ZlXG4gICAgXCJjaGVlc2VzXCI6IHtcInBhcnRpY2xlc1wiOiBCaWdNb3VzZVBhcnRpY2xlcyh7cmFkaXVzOjMwfSl9LFxuICAgIC8vIExpbWl0IHRoZSBhbW91dCwgZG9uJ3QgYWJ1c2VcbiAgICBcInBvcnRpb25zXCI6IFwiYVwiLFxuICAgIC8vIEFycmFuZ2UgdGhlIG1vdXNlIGhhcmJvcmFnZSFcbiAgICBcImhhcmJvcmFnZVwiOiAobW91c2UsIGNoZWVzZSkgPT4ge1xuXG4gICAgICAgIHN3aXRjaChtb3VzZS5yZWwpe1xuXG4gICAgICAgICAgICBjYXNlIFwiZXhhbXBsZS5ibG9nc3BvdC5jb20vMVwiOlxuICAgICAgICAgICAgICAgIGNoZWVzZSgncGFydGljbGVzJywge251bTozLCBzaXplOjI1LCBjb2xvcjpcImhzbGEoMCwgMTAlLCA1MCUsIDEpXCJ9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgY2FzZSBcImV4YW1wbGUuYmxvZ3Nwb3QuY29tLzJcIjpcbiAgICAgICAgICAgICAgICBjaGVlc2UoJ3BhcnRpY2xlcycsIHtudW06NzAsIHNpemU6NSwgY29sb3I6XCJoc2xhKDAsIDgwJSwgNTAlLCAxKVwifSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgXCJleGFtcGxlLmJsb2dzcG90LmNvbS8zXCI6XG4gICAgICAgICAgICAgICAgY2hlZXNlKCdwYXJ0aWNsZXMnLCB7bnVtOjEwLCBzaXplOjEsIGNvbG9yOlwiaHNsYSgwLCA1MCUsIDUwJSwgMSlcIn0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlIFwiZXhhbXBsZS5ibG9nc3BvdC5jb20vNFwiOlxuICAgICAgICAgICAgICAgIGNoZWVzZSgncGFydGljbGVzJywge251bTozMCwgc2l6ZToxMCwgY29sb3I6XCJoc2xhKDAsIDgwJSwgNTAlLCAxKVwiLCByYWRpdXM6IDUwfSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6IGNoZWVzZSgpO1xuICAgICAgICB9XG4gICAgfVxufSk7XG5cbi8vIFN0YXJ0IGZlZWRpbmcgaXQhXG5CaWdNb3VzZS5mZWVkKCk7XG5cbi8vQmlnTW91c2UuY29uZmlndXJlKHtcbi8vXG4vLyAgICAvLyBEZWNsYXJlIHBsdWdpbnMgdG8gdXNlXG4vLyAgICBcInBsdWdpbnNcIjoge1wicGFydGljbGVzXCI6IEJpZ01vdXNlUGFydGljbGVzKHtyYWRpdXM6MzB9KX0sXG4vLyAgICAvLyBXaGF0IGVsZW1lbnRzIHlvdSB3YW50IHRvIHBpY2sgdXAsIGRlZmF1bHRzIHRvIGFsbFxuLy8gICAgXCJzZWxlY3RvclwiOiBcImFcIixcbi8vICAgIC8vIFJ1biBldmVyeSB0aW1lIGFuIGVsZW1lbnQgaXMgZm91bmQgYW5kIGNhbGxzIHRoZSBwbHVnaW4gdG8gcmVuZGVyXG4vLyAgICBcImRyYXdcIjogKGVsZW1lbnQsIGRvbmUpID0+IHtcbi8vXG4vLyAgICAgICAgc3dpdGNoKGVsZW1lbnQuaHJlZil7XG4vL1xuLy8gICAgICAgICAgICBjYXNlIFwiI2V4YW1wbGUuYmxvZ3Nwb3QuY29tLzFcIjpcbi8vICAgICAgICAgICAgICAgIGRvbmUoJ3BhcnRpY2xlcycsIHtudW06Mywgc2l6ZToyNSwgY29sb3I6XCJoc2xhKDAsIDEwJSwgNTAlLCAxKVwifSk7XG4vLyAgICAgICAgICAgICAgICBicmVhaztcbi8vXG4vLyAgICAgICAgICAgIGNhc2UgXCIjZXhhbXBsZS5ibG9nc3BvdC5jb20vMlwiOlxuLy8gICAgICAgICAgICAgICAgZG9uZSgncGFydGljbGVzJywge251bTo3MCwgc2l6ZTo1LCBjb2xvcjpcImhzbGEoMCwgODAlLCA1MCUsIDEpXCJ9KTtcbi8vICAgICAgICAgICAgICAgIGJyZWFrO1xuLy9cbi8vICAgICAgICAgICAgY2FzZSBcIiNleGFtcGxlLmJsb2dzcG90LmNvbS8zXCI6XG4vLyAgICAgICAgICAgICAgICBkb25lKCdwYXJ0aWNsZXMnLCB7bnVtOjEwLCBzaXplOjEsIGNvbG9yOlwiaHNsYSgwLCA1MCUsIDUwJSwgMSlcIn0pO1xuLy8gICAgICAgICAgICAgICAgYnJlYWs7XG4vL1xuLy8gICAgICAgICAgICBjYXNlIFwiI2V4YW1wbGUuYmxvZ3Nwb3QuY29tLzRcIjpcbi8vICAgICAgICAgICAgICAgIGRvbmUoJ3BhcnRpY2xlcycsIHtudW06MzAsIHNpemU6MTAsIGNvbG9yOlwiaHNsYSgwLCA4MCUsIDUwJSwgMSlcIiwgcmFkaXVzOiA1MH0pO1xuLy8gICAgICAgICAgICAgICAgYnJlYWs7XG4vL1xuLy8gICAgICAgICAgICBkZWZhdWx0OiBkb25lKCk7XG4vLyAgICAgICAgfVxuLy8gICAgfVxuLy99KTtcbi8vXG4vLy8vIFN0YXJ0IGl0IVxuLy9CaWdNb3VzZS5lbmFibGUoKTtcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBpbmRleC5qc1xuICoqLyJdLCJtYXBwaW5ncyI6Ijs7QUFDQTtBQUNBOzs7QUFBQTtBQUNBOzs7OztBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQUE7QUFsQkE7QUFvQkE7QUE3QkE7QUFDQTs7QUFnQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsiLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	eval("(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"BigMouseParticles\"] = factory();\n\telse\n\t\troot[\"BigMouseParticles\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\teval(\"'use strict';\\n\\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\\n\\n/**\\n * Particles plugin implementation\\n * @param options {radius}\\n * @returns Function(Object, {num, size, radius, color, speed, distortion})\\n */\\n// Note: not using \\\"export default\\\" es6 to bypass .default when using library globally from window scope.\\nmodule.exports = exports = function exports() {\\n    var options = arguments.length <= 0 || arguments[0] === undefined ? { radius: 30 } : arguments[0];\\n\\n\\n    var iteration = 1;\\n    var rad = options.radius;\\n\\n    return {\\n        painter: function painter(self, options) {\\n\\n            var particles = getParticles(options, self.mouseCoords);\\n\\n            return function (self) {\\n\\n                self.canvas.ctx.globalCompositeOperation = 'source-over';\\n                self.canvas.ctx.fillStyle = 'transparent';\\n                self.canvas.ctx.clearRect(0, 0, self.canvas.el.width, self.canvas.el.height);\\n                self.canvas.ctx.fillRect(0, 0, self.canvas.el.width, self.canvas.el.height);\\n\\n                var crad = rad * Math.sin(iteration / 30);\\n\\n                self.canvas.ctx.globalCompositeOperation = 'lighter';\\n\\n                particles.forEach(function (particle) {\\n\\n                    self.canvas.ctx.strokeStyle = particle.color;\\n                    self.canvas.ctx.lineWidth = particle.size;\\n                    self.canvas.ctx.beginPath();\\n\\n                    if (particle.radius) crad = particle.radius * Math.sin(iteration / 30);\\n\\n                    var x = self.mouseCoords.x + (crad + particle.distortion * Math.sin(iteration / particle.tmod)) * Math.cos(particle.angle * 180 / Math.PI);\\n                    var y = self.mouseCoords.y + (crad + particle.distortion * Math.sin(iteration / particle.tmod)) * Math.sin(particle.angle * 180 / Math.PI);\\n\\n                    self.canvas.ctx.moveTo(particle.lastPos.x, particle.lastPos.y);\\n                    self.canvas.ctx.lineTo(x, y);\\n\\n                    particle.lastPos = { x: x, y: y };\\n                    particle.angle = (particle.angle + particle.speed) % 359;\\n\\n                    self.canvas.ctx.stroke();\\n                });\\n\\n                iteration++;\\n            };\\n        }\\n    };\\n};\\n\\n/**\\n * Create particles accordingly to input options\\n * @param options\\n * @param mouse The mouse coordinates\\n * @returns {Array}\\n */\\nfunction getParticles(options, mouse) {\\n\\n    var rand = function rand(min, max) {\\n        return Math.random() * (max - min) + min;\\n    };\\n\\n    var particles = [];\\n\\n    while (~~options.num--) {\\n\\n        var angle = rand(0, 359);\\n\\n        particles = [].concat(_toConsumableArray(particles), [{\\n            color: options.color ? options.color : 'hsla(' + (rand(0, 1) > .5 ? ~~rand(0, 20) : ~~rand(180, 200)) + ',100%,60%,1)',\\n            distortion: rand(0, options.distortion ? options.distortion : 10),\\n            tmod: rand(5, 15),\\n            size: rand(1, options.size),\\n            speed: rand(1, options.speed ? options.speed : 3) / 10000,\\n            angle: angle,\\n            radius: options.radius,\\n            lastPos: {\\n                x: mouse.x,\\n                y: mouse.y\\n            }\\n        }]);\\n    }\\n\\n    return particles;\\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvcGFydGljbGVzLmpzPzU0ZTQiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBQYXJ0aWNsZXMgcGx1Z2luIGltcGxlbWVudGF0aW9uXG4gKiBAcGFyYW0gb3B0aW9ucyB7cmFkaXVzfVxuICogQHJldHVybnMgRnVuY3Rpb24oT2JqZWN0LCB7bnVtLCBzaXplLCByYWRpdXMsIGNvbG9yLCBzcGVlZCwgZGlzdG9ydGlvbn0pXG4gKi9cbi8vIE5vdGU6IG5vdCB1c2luZyBcImV4cG9ydCBkZWZhdWx0XCIgZXM2IHRvIGJ5cGFzcyAuZGVmYXVsdCB3aGVuIHVzaW5nIGxpYnJhcnkgZ2xvYmFsbHkgZnJvbSB3aW5kb3cgc2NvcGUuXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBmdW5jdGlvbihvcHRpb25zPSB7cmFkaXVzOjMwfSl7XG5cbiAgICBsZXQgaXRlcmF0aW9uID0gMTtcbiAgICBsZXQgcmFkID0gb3B0aW9ucy5yYWRpdXM7XG5cbiAgICByZXR1cm4ge1xuXG4gICAgICAgIHBhaW50ZXIoc2VsZiwgb3B0aW9ucyl7XG5cbiAgICAgICAgICAgIGNvbnN0IHBhcnRpY2xlcyA9IGdldFBhcnRpY2xlcyhvcHRpb25zLCBzZWxmLm1vdXNlQ29vcmRzKTtcblxuICAgICAgICAgICAgcmV0dXJuIHNlbGYgPT4ge1xuXG4gICAgICAgICAgICAgICAgc2VsZi5jYW52YXMuY3R4Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9ICdzb3VyY2Utb3Zlcic7XG4gICAgICAgICAgICAgICAgc2VsZi5jYW52YXMuY3R4LmZpbGxTdHlsZSA9ICd0cmFuc3BhcmVudCc7XG4gICAgICAgICAgICAgICAgc2VsZi5jYW52YXMuY3R4LmNsZWFyUmVjdCgwLCAwLCBzZWxmLmNhbnZhcy5lbC53aWR0aCwgc2VsZi5jYW52YXMuZWwuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICBzZWxmLmNhbnZhcy5jdHguZmlsbFJlY3QoMCwgMCwgc2VsZi5jYW52YXMuZWwud2lkdGgsIHNlbGYuY2FudmFzLmVsLmhlaWdodCk7XG5cbiAgICAgICAgICAgICAgICBsZXQgY3JhZCA9IHJhZCAqIE1hdGguc2luKGl0ZXJhdGlvbiAvIDMwKTtcblxuICAgICAgICAgICAgICAgIHNlbGYuY2FudmFzLmN0eC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSAnbGlnaHRlcic7XG5cbiAgICAgICAgICAgICAgICBwYXJ0aWNsZXMuZm9yRWFjaChwYXJ0aWNsZSA9PiB7XG5cbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jYW52YXMuY3R4LnN0cm9rZVN0eWxlID0gcGFydGljbGUuY29sb3I7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY2FudmFzLmN0eC5saW5lV2lkdGggPSBwYXJ0aWNsZS5zaXplO1xuICAgICAgICAgICAgICAgICAgICBzZWxmLmNhbnZhcy5jdHguYmVnaW5QYXRoKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYocGFydGljbGUucmFkaXVzKSBjcmFkID0gIHBhcnRpY2xlLnJhZGl1cyAqIE1hdGguc2luKGl0ZXJhdGlvbiAvIDMwKTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCB4ID0gc2VsZi5tb3VzZUNvb3Jkcy54ICsgKGNyYWQgKyBwYXJ0aWNsZS5kaXN0b3J0aW9uICogTWF0aC5zaW4oaXRlcmF0aW9uIC8gcGFydGljbGUudG1vZCkpICogTWF0aC5jb3MocGFydGljbGUuYW5nbGUgKiAxODAgLyBNYXRoLlBJKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeSA9IHNlbGYubW91c2VDb29yZHMueSArIChjcmFkICsgcGFydGljbGUuZGlzdG9ydGlvbiAqIE1hdGguc2luKGl0ZXJhdGlvbiAvIHBhcnRpY2xlLnRtb2QpKSAqIE1hdGguc2luKHBhcnRpY2xlLmFuZ2xlICogMTgwIC8gTWF0aC5QSSk7XG5cbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jYW52YXMuY3R4Lm1vdmVUbyhwYXJ0aWNsZS5sYXN0UG9zLngsIHBhcnRpY2xlLmxhc3RQb3MueSk7XG4gICAgICAgICAgICAgICAgICAgIHNlbGYuY2FudmFzLmN0eC5saW5lVG8oeCwgeSk7XG5cbiAgICAgICAgICAgICAgICAgICAgcGFydGljbGUubGFzdFBvcyA9IHsgeCwgeSB9O1xuICAgICAgICAgICAgICAgICAgICBwYXJ0aWNsZS5hbmdsZSA9IChwYXJ0aWNsZS5hbmdsZSArIHBhcnRpY2xlLnNwZWVkKSAlIDM1OTtcblxuICAgICAgICAgICAgICAgICAgICBzZWxmLmNhbnZhcy5jdHguc3Ryb2tlKCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpdGVyYXRpb24rKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxufVxuXG4vKipcbiAqIENyZWF0ZSBwYXJ0aWNsZXMgYWNjb3JkaW5nbHkgdG8gaW5wdXQgb3B0aW9uc1xuICogQHBhcmFtIG9wdGlvbnNcbiAqIEBwYXJhbSBtb3VzZSBUaGUgbW91c2UgY29vcmRpbmF0ZXNcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqL1xuZnVuY3Rpb24gZ2V0UGFydGljbGVzKG9wdGlvbnMsIG1vdXNlKXtcblxuICAgIGNvbnN0IHJhbmQgPSAobWluLCBtYXgpID0+IE1hdGgucmFuZG9tKCkgKiAobWF4IC0gbWluKSArIG1pbjtcblxuICAgIGxldCBwYXJ0aWNsZXMgPSBbXTtcblxuICAgIHdoaWxlKH5+b3B0aW9ucy5udW0tLSkge1xuXG4gICAgICAgIGNvbnN0IGFuZ2xlID0gcmFuZCgwLCAzNTkpO1xuXG4gICAgICAgIHBhcnRpY2xlcyA9IFsuLi5wYXJ0aWNsZXMsIHtcbiAgICAgICAgICAgIGNvbG9yOiBvcHRpb25zLmNvbG9yID8gb3B0aW9ucy5jb2xvciA6IGBoc2xhKCR7KHJhbmQoMCwxKSA+IC41KSA/IH5+cmFuZCgwLCAyMCkgOiB+fnJhbmQoMTgwLCAyMDApfSwxMDAlLDYwJSwxKWAsXG4gICAgICAgICAgICBkaXN0b3J0aW9uOiByYW5kKDAsb3B0aW9ucy5kaXN0b3J0aW9uID8gb3B0aW9ucy5kaXN0b3J0aW9uIDogMTApLFxuICAgICAgICAgICAgdG1vZDogcmFuZCg1LCAxNSksXG4gICAgICAgICAgICBzaXplOiByYW5kKDEsIG9wdGlvbnMuc2l6ZSksXG4gICAgICAgICAgICBzcGVlZDogcmFuZCgxLCBvcHRpb25zLnNwZWVkID8gb3B0aW9ucy5zcGVlZCA6IDMpIC8gMTAwMDAsXG4gICAgICAgICAgICBhbmdsZTogYW5nbGUsXG4gICAgICAgICAgICByYWRpdXM6IG9wdGlvbnMucmFkaXVzLFxuICAgICAgICAgICAgbGFzdFBvczoge1xuICAgICAgICAgICAgICAgIHg6IG1vdXNlLngsXG4gICAgICAgICAgICAgICAgeTogbW91c2UueVxuICAgICAgICAgICAgfVxuICAgICAgICB9XTtcbiAgICB9XG5cbiAgICByZXR1cm4gcGFydGljbGVzXG59XG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogc3JjL3BhcnRpY2xlcy5qc1xuICoqLyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQU1BO0FBQUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBdkNBO0FBMENBO0FBQ0E7Ozs7Ozs7QUFPQTtBQUNBO0FBQ0E7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRkE7QUFSQTtBQWFBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\");\n\n/***/ }\n/******/ ])\n});\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	eval("(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"BigMouse\"] = factory();\n\telse\n\t\troot[\"BigMouse\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\teval(\"'use strict';\\n\\nvar _helpers = __webpack_require__(2);\\n\\n/**\\n * BigMouse Core API\\n * The minimalist API it exposes consist of three single methods: configure, enable and disable.\\n * @type {{configure: Function({plugins, selector, draw}), enable: Function, disable: Function}}\\n */\\nvar BigMouse = {\\n    configure: function configure(options) {\\n\\n        this.options = (0, _helpers.normalize)(this, options);\\n\\n        this.canvas = (0, _helpers.createCanvas)(this);\\n\\n        (0, _helpers.addEventListeners)(this);\\n\\n        (0, _helpers.loop)(this);\\n    },\\n    enable: function enable() {\\n\\n        this.enabled = true;\\n    },\\n    disable: function disable() {\\n\\n        this.enabled = false;\\n    }\\n};\\n\\n// Cheese/Mouse Freak Alias\\n/* NOTE: experimental and not production ready. Keep in touch for stable release */\\n\\nBigMouse.cheese = BigMouse.configure;\\nBigMouse.feed = BigMouse.enable;\\nBigMouse.trap = BigMouse.disable;\\n\\n// Note: not using \\\"export default\\\" es6 to bypass .default when using library globally from window scope.\\n/* export a singleton instance */\\nmodule.exports = exports = Object.create(BigMouse);//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy9zcmMvY29yZS5qcz83ZWI1Il0sInNvdXJjZXNDb250ZW50IjpbIi8qIE5PVEU6IGV4cGVyaW1lbnRhbCBhbmQgbm90IHByb2R1Y3Rpb24gcmVhZHkuIEtlZXAgaW4gdG91Y2ggZm9yIHN0YWJsZSByZWxlYXNlICovXG5cbmltcG9ydCB7bm9ybWFsaXplLCBjcmVhdGVDYW52YXMsIGFkZEV2ZW50TGlzdGVuZXJzLCBsb29wfSBmcm9tICcuL2hlbHBlcnMnO1xuXG4vKipcbiAqIEJpZ01vdXNlIENvcmUgQVBJXG4gKiBUaGUgbWluaW1hbGlzdCBBUEkgaXQgZXhwb3NlcyBjb25zaXN0IG9mIHRocmVlIHNpbmdsZSBtZXRob2RzOiBjb25maWd1cmUsIGVuYWJsZSBhbmQgZGlzYWJsZS5cbiAqIEB0eXBlIHt7Y29uZmlndXJlOiBGdW5jdGlvbih7cGx1Z2lucywgc2VsZWN0b3IsIGRyYXd9KSwgZW5hYmxlOiBGdW5jdGlvbiwgZGlzYWJsZTogRnVuY3Rpb259fVxuICovXG5jb25zdCBCaWdNb3VzZSA9ICB7XG5cbiAgICBjb25maWd1cmUob3B0aW9ucyl7XG5cbiAgICAgICAgdGhpcy5vcHRpb25zID0gbm9ybWFsaXplKHRoaXMsIG9wdGlvbnMpO1xuXG4gICAgICAgIHRoaXMuY2FudmFzID0gY3JlYXRlQ2FudmFzKHRoaXMpO1xuXG4gICAgICAgIGFkZEV2ZW50TGlzdGVuZXJzKHRoaXMpO1xuXG4gICAgICAgIGxvb3AodGhpcyk7XG5cbiAgICB9LFxuXG4gICAgZW5hYmxlKCl7XG5cbiAgICAgICAgdGhpcy5lbmFibGVkID0gdHJ1ZTtcbiAgICB9LFxuXG4gICAgZGlzYWJsZSgpe1xuXG4gICAgICAgIHRoaXMuZW5hYmxlZCA9IGZhbHNlO1xuICAgIH1cbn07XG5cbi8vIENoZWVzZS9Nb3VzZSBGcmVhayBBbGlhc1xuQmlnTW91c2UuY2hlZXNlID0gQmlnTW91c2UuY29uZmlndXJlO1xuQmlnTW91c2UuZmVlZCA9IEJpZ01vdXNlLmVuYWJsZTtcbkJpZ01vdXNlLnRyYXAgPSBCaWdNb3VzZS5kaXNhYmxlO1xuXG4vLyBOb3RlOiBub3QgdXNpbmcgXCJleHBvcnQgZGVmYXVsdFwiIGVzNiB0byBieXBhc3MgLmRlZmF1bHQgd2hlbiB1c2luZyBsaWJyYXJ5IGdsb2JhbGx5IGZyb20gd2luZG93IHNjb3BlLlxuLyogZXhwb3J0IGEgc2luZ2xldG9uIGluc3RhbmNlICovXG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBPYmplY3QuY3JlYXRlKEJpZ01vdXNlKTtcblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiBzcmMvY29yZS5qc1xuICoqLyJdLCJtYXBwaW5ncyI6Ijs7QUFFQTtBQUNBOzs7Ozs7QUFNQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQXRCQTtBQUNBOzs7O0FBeUJBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSIsInNvdXJjZVJvb3QiOiIifQ==\");\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\teval(\"\\\"use strict\\\";\\n\\nObject.defineProperty(exports, \\\"__esModule\\\", {\\n    value: true\\n});\\nexports.normalize = normalize;\\nexports.createCanvas = createCanvas;\\nexports.addEventListeners = addEventListeners;\\nexports.loop = loop;\\n\\n//@todo - 11 July 2016 - watch out for memory leak in closures\\n//@todo - 11 July 2016 - selector just matches tag elements\\n//@todo - 11 July 2016 - hovering an element using a plugin does not render unless you hover it for a while (related to throttle)\\n//@todo - 11 July 2016 - unit test suite\\n\\n/**\\n * Parse and normalize default options\\n * @param self BigMouse instance\\n * @param options The input options\\n * @returns {plugins, draw, selector}\\n */\\nfunction normalize(self, options) {\\n\\n    self.enabled = false;\\n\\n    // Alias\\n    if (options.cheeses) options.plugins = options.cheeses;\\n    if (options.portions) options.selector = options.portions;\\n    if (options.harborage) options.draw = options.harborage;\\n\\n    if (options.selector) options.selector = options.selector.toLowerCase();\\n\\n    return options;\\n}\\n\\n/**\\n * Append a canvas element into the HTML body document sizing the whole page\\n * @param self BigMouse instance\\n * @returns {{el: Element, ctx: CanvasRenderingContext2D}}\\n */\\nfunction createCanvas(self) {\\n\\n    var canvas = document.createElement('canvas');\\n\\n    canvas.width = window.innerWidth;\\n    canvas.height = window.innerHeight;\\n    canvas.setAttribute(\\\"style\\\", \\\"position:absolute;top:0;left:0;pointer-events:none;\\\");\\n\\n    document.body.appendChild(canvas);\\n\\n    self.currentElement = canvas;\\n\\n    return { el: canvas, ctx: canvas.getContext(\\\"2d\\\") };\\n}\\n\\n/**\\n * Attach resize and mousemove event handler listeners\\n * @param self BigMouse instance\\n */\\nfunction addEventListeners(self) {\\n\\n    self.mouseCoords = { x: self.canvas.el.width / 2, y: self.canvas.el.height / 2 };\\n\\n    window.addEventListener('mousemove', throttle(onMouseMove(self), function () {\\n        return self.debouncing ? 0 : 150;\\n    }, { trailing: false }));\\n\\n    window.addEventListener('resize', throttle(onResize(self), function () {\\n        return 150;\\n    }, { trailing: false }));\\n}\\n\\n/**\\n * Kick off the infinite render loop\\n * @param self\\n */\\nfunction loop(self) {\\n\\n    self.loopID = requestAnimationFrame(function () {\\n        return loop(self);\\n    });\\n\\n    if (!self.enabled || !self.painter) return;\\n\\n    self.painter(self);\\n}\\n\\n/**\\n * Retrieve the current mouse coordinates position\\n * @param canvasDOM\\n * @param event\\n * @returns {{x: number, y: number}}\\n */\\nfunction getCurrentMousePos(canvasDOM, event) {\\n\\n    var rect = canvasDOM.getBoundingClientRect(); // abs. size of element\\n    var scaleX = canvasDOM.width / rect.width; // relationship bitmap vs. element for X\\n    var scaleY = canvasDOM.height / rect.height; // relationship bitmap vs. element for Y\\n\\n    return {\\n        x: (event.clientX - rect.left) * scaleX, // scale mouse coordinates after they have\\n        y: (event.clientY - rect.top) * scaleY // been adjusted to be relative to element\\n    };\\n}\\n\\n/**\\n * Manages plugin calls, if any, from user draw method\\n * @param self\\n * @param element\\n * @returns {Function}\\n */\\nfunction done(self, element) {\\n\\n    return function (plugin, options) {\\n\\n        if (!plugin) {\\n\\n            self.enabled = false;\\n            self.canvas.ctx.clearRect(0, 0, self.canvas.el.width, self.canvas.el.height);\\n            return self.currentElement = self.canvas.el;\\n        }\\n\\n        self.currentElement = element;\\n\\n        self.painter = getPainter(self, self.options.plugins[plugin], options);\\n        self.enabled = true;\\n    };\\n}\\n\\n/**\\n * Request painter method to the active plugin\\n * @param self\\n * @param plugin\\n * @param options\\n * @returns {Function}\\n */\\nfunction getPainter(self, plugin, options) {\\n\\n    if (!plugin) return;\\n\\n    return plugin.painter(self, options);\\n}\\n\\n/**\\n * The mousemove event handler, in charge of calling user draw method if applicable\\n * @param self\\n * @returns {Function}\\n */\\nfunction onMouseMove(self) {\\n\\n    return function (event) {\\n\\n        //if(!self.enabled) return;\\n\\n        if (self.options.draw) {\\n\\n            self.mouseCoords = getCurrentMousePos(self.canvas.el, event);\\n\\n            var element = document.elementFromPoint(self.mouseCoords.x, self.mouseCoords.y);\\n\\n            if (element.isSameNode(self.currentElement)) return;\\n\\n            if (element && element.tagName.toLowerCase() === self.options.selector) {\\n\\n                self.debouncing = true;\\n                self.options.draw(element, done(self, element));\\n            } else {\\n                self.debouncing = false;\\n                done(self)();\\n            }\\n        }\\n    };\\n}\\n\\n/**\\n * The resize event handler, in charge of resizing canvas size to fit full screen\\n * @param self\\n * @returns {Function}\\n */\\nfunction onResize(self) {\\n\\n    return function (event) {\\n\\n        self.canvas.el.width = window.innerWidth;\\n        self.canvas.el.height = window.innerHeight;\\n    };\\n}\\n\\n/**\\n * Underscore implementation of throttle function modified to accept a function as the wait parameter.\\n * This allows to calculate waiting time dynamically.\\n * @param func\\n * @param wait\\n * @param options\\n * @returns {throttled}\\n */\\nfunction throttle(func, wait, options) {\\n    var timeout, context, args, result;\\n    var previous = 0;\\n    if (!options) options = {};\\n\\n    var later = function later() {\\n        previous = options.leading === false ? 0 : _.now();\\n        timeout = null;\\n        result = func.apply(context, args);\\n        if (!timeout) context = args = null;\\n    };\\n\\n    var throttled = function throttled() {\\n        var now = new Date().getTime();\\n        if (!previous && options.leading === false) previous = now;\\n        var remaining = wait() - (now - previous);\\n        context = this;\\n        args = arguments;\\n        if (remaining <= 0 || remaining > wait()) {\\n            if (timeout) {\\n                clearTimeout(timeout);\\n                timeout = null;\\n            }\\n            previous = now;\\n            result = func.apply(context, args);\\n            if (!timeout) context = args = null;\\n        } else if (!timeout && options.trailing !== false) {\\n            timeout = setTimeout(later, remaining);\\n        }\\n        return result;\\n    };\\n\\n    throttled.cancel = function () {\\n        clearTimeout(timeout);\\n        previous = 0;\\n        timeout = context = args = null;\\n    };\\n\\n    return throttled;\\n}//# sourceMappingURL=data:application/json;charset=utf-8;base64,\");\n\n/***/ }\n/******/ ])\n});\n;//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ }
/******/ ]);